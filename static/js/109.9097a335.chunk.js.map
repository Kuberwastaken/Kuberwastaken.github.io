{"version":3,"file":"static/js/109.9097a335.chunk.js","mappings":"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","sources":["components/FlappyBird/TerminalFlappyBird.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TerminalFlappyBird.css';\r\n\r\nconst TerminalFlappyBird = () => {\r\n  const [birdPosition, setBirdPosition] = useState(125); // Adjusted initial position for mobile\r\n  const [gameHasStarted, setGameHasStarted] = useState(false);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [highScore, setHighScore] = useState(0);\r\n  const [velocity, setVelocity] = useState(0);\r\n  const [pipes, setPipes] = useState([]);\r\n  \r\n  const isMobile = window.innerWidth <= 768;\r\n  const GRAVITY = isMobile ? 0.4 : 0.8; // Adjusted gravity for mobile\r\n  const JUMP_FORCE = isMobile ? -6 : -12; // Adjusted jump force for mobile\r\n  const PIPE_SPEED = 4;\r\n  const PIPE_WIDTH = 60;\r\n  const PIPE_GAP = 180;\r\n  const BIRD_SIZE = isMobile ? 10 : 20; // Adjusted bird size for mobile\r\n  const GAME_HEIGHT = isMobile ? 250 : 500;\r\n  const GAME_WIDTH = isMobile ? 300 : 800;\r\n\r\n  // Initialize game\r\n  useEffect(() => {\r\n    const savedHighScore = localStorage.getItem('flappyHighScore');\r\n    if (savedHighScore) setHighScore(parseInt(savedHighScore));\r\n  }, []);\r\n\r\n  // Handle keyboard controls\r\n  useEffect(() => {\r\n    const handleSpacebar = (e) => {\r\n      if (e.code === 'Space') {\r\n        e.preventDefault();\r\n        jump();\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('keydown', handleSpacebar);\r\n    return () => window.removeEventListener('keydown', handleSpacebar);\r\n  }, []);\r\n\r\n  // Main game loop\r\n  useEffect(() => {\r\n    let frameId;\r\n    let pipeSpawnTimer = 0;\r\n    \r\n    const gameLoop = () => {\r\n      if (!gameHasStarted || gameOver) {\r\n        return;\r\n      }\r\n\r\n      // Update bird physics\r\n      setVelocity(v => v + GRAVITY);\r\n      setBirdPosition(pos => {\r\n        const newPos = pos + velocity;\r\n        \r\n        if (newPos > GAME_HEIGHT - BIRD_SIZE || newPos < 0) {\r\n          endGame();\r\n          return pos;\r\n        }\r\n        \r\n        return newPos;\r\n      });\r\n\r\n      // Update and spawn pipes\r\n      setPipes(currentPipes => {\r\n        // Move existing pipes\r\n        const updatedPipes = currentPipes\r\n          .map(pipe => ({\r\n            ...pipe,\r\n            x: pipe.x - PIPE_SPEED\r\n          }))\r\n          .filter(pipe => pipe.x > -PIPE_WIDTH);\r\n\r\n        // Check if we need to spawn a new pipe\r\n        if (currentPipes.length === 0 || \r\n            currentPipes[currentPipes.length - 1].x < GAME_WIDTH - 300) {\r\n          const newHeight = Math.random() * (GAME_HEIGHT - PIPE_GAP - 100) + 50;\r\n          updatedPipes.push({\r\n            id: Date.now(),\r\n            x: GAME_WIDTH,\r\n            height: newHeight,\r\n            passed: false\r\n          });\r\n        }\r\n\r\n        // Update score\r\n        updatedPipes.forEach(pipe => {\r\n          if (!pipe.passed && pipe.x < 50 - PIPE_WIDTH) {\r\n            setScore(s => s + 1);\r\n            pipe.passed = true;\r\n          }\r\n        });\r\n\r\n        return updatedPipes;\r\n      });\r\n\r\n      // Check collisions\r\n      const birdRect = {\r\n        left: 50,\r\n        right: 50 + BIRD_SIZE,\r\n        top: birdPosition,\r\n        bottom: birdPosition + BIRD_SIZE\r\n      };\r\n\r\n      pipes.forEach(pipe => {\r\n        const upperPipeRect = {\r\n          left: pipe.x,\r\n          right: pipe.x + PIPE_WIDTH,\r\n          top: 0,\r\n          bottom: pipe.height\r\n        };\r\n\r\n        const lowerPipeRect = {\r\n          left: pipe.x,\r\n          right: pipe.x + PIPE_WIDTH,\r\n          top: pipe.height + PIPE_GAP,\r\n          bottom: GAME_HEIGHT\r\n        };\r\n\r\n        if (checkCollision(birdRect, upperPipeRect) || \r\n            checkCollision(birdRect, lowerPipeRect)) {\r\n          endGame();\r\n        }\r\n      });\r\n\r\n      frameId = requestAnimationFrame(gameLoop);\r\n    };\r\n\r\n    if (gameHasStarted && !gameOver) {\r\n      frameId = requestAnimationFrame(gameLoop);\r\n    }\r\n\r\n    return () => {\r\n      if (frameId) {\r\n        cancelAnimationFrame(frameId);\r\n      }\r\n    };\r\n  }, [gameHasStarted, gameOver, velocity, pipes]);\r\n\r\n  const checkCollision = (rect1, rect2) => {\r\n    return rect1.left < rect2.right &&\r\n           rect1.right > rect2.left &&\r\n           rect1.top < rect2.bottom &&\r\n           rect1.bottom > rect2.top;\r\n  };\r\n\r\n  const jump = () => {\r\n    if (gameOver) {\r\n      resetGame();\r\n      return;\r\n    }\r\n    \r\n    if (!gameHasStarted) {\r\n      setGameHasStarted(true);\r\n    }\r\n    \r\n    setVelocity(JUMP_FORCE);\r\n  };\r\n\r\n  const endGame = () => {\r\n    setGameOver(true);\r\n    setGameHasStarted(false);\r\n    if (score > highScore) {\r\n      setHighScore(score);\r\n      localStorage.setItem('flappyHighScore', score);\r\n    }\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBirdPosition(125); // Adjusted initial position for mobile\r\n    setPipes([]);\r\n    setScore(0);\r\n    setVelocity(0);\r\n    setGameOver(false);\r\n    setGameHasStarted(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"game-content\">\r\n        <div className=\"scoreboard\">\r\n          <div className=\"score\">Score: {score}</div>\r\n          <div className=\"score\">High Score: {highScore}</div>\r\n        </div>\r\n        \r\n        <div \r\n          className=\"game-area\"\r\n          onClick={jump}\r\n          onTouchStart={jump}\r\n          style={{\r\n            width: isMobile ? '100%' : `${GAME_WIDTH}px`,\r\n            height: isMobile ? '250px' : `${GAME_HEIGHT}px`,\r\n            position: 'relative',\r\n            overflow: 'hidden',\r\n            backgroundColor: '#000',\r\n            color: '#56b494',\r\n            fontFamily: 'monospace',\r\n            border: '2px solid #56b494',\r\n            padding: '10px'\r\n          }}\r\n        >\r\n          <div \r\n            className=\"bird\"\r\n            style={{ \r\n              position: 'absolute',\r\n              left: '50px',\r\n              top: `${birdPosition}px`,\r\n              width: isMobile ? '10px' : `${BIRD_SIZE}px`,\r\n              height: isMobile ? '10px' : `${BIRD_SIZE}px`,\r\n              backgroundColor: '#ffebcd',\r\n              borderRadius: '50%',\r\n              transform: `rotate(${velocity * 2}deg)`,\r\n              transition: 'transform 0.1s',\r\n            }}\r\n          />\r\n          \r\n          {pipes.map(pipe => (\r\n            <React.Fragment key={pipe.id}>\r\n              <div \r\n                style={{ \r\n                  position: 'absolute',\r\n                  left: `${pipe.x}px`,\r\n                  top: '0',\r\n                  width: isMobile ? '30px' : `${PIPE_WIDTH}px`,\r\n                  height: `${pipe.height}px`,\r\n                  backgroundColor: '#56b494',\r\n                }}\r\n              />\r\n              <div \r\n                style={{ \r\n                  position: 'absolute',\r\n                  left: `${pipe.x}px`,\r\n                  top: `${pipe.height + PIPE_GAP}px`,\r\n                  width: isMobile ? '30px' : `${PIPE_WIDTH}px`,\r\n                  height: `${GAME_HEIGHT - (pipe.height + PIPE_GAP)}px`,\r\n                  backgroundColor: '#56b494',\r\n                }}\r\n              />\r\n            </React.Fragment>\r\n          ))}\r\n\r\n          {(gameOver || !gameHasStarted) && (\r\n            <div style={{\r\n              position: 'absolute',\r\n              top: '0',\r\n              left: '0',\r\n              right: '0',\r\n              bottom: '0',\r\n              backgroundColor: 'rgba(0, 0, 0, 0.7)',\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              color: '#56b494',\r\n              fontSize: '24px',\r\n              fontFamily: 'monospace'\r\n            }}>\r\n              <div style={{ fontSize: '32px', marginBottom: '20px' }}>\r\n                {gameOver ? 'GAME OVER' : 'TERMINAL BIRD'}\r\n              </div>\r\n              {gameOver && (\r\n                <>\r\n                  <div>Score: {score}</div>\r\n                  <div>High Score: {highScore}</div>\r\n                </>\r\n              )}\r\n              <div style={{ fontSize: '18px', marginTop: '20px' }}>\r\n                {isMobile ? \"Tap\" : \"Press SPACE\"} to {gameOver ? \"play again\" : \"start\"}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ textAlign: 'center', marginTop: '20px', color: '#666' }}>\r\n          {isMobile \r\n            ? \"Tap anywhere to make the bird jump\"\r\n            : \" \"\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TerminalFlappyBird;"],"names":["TerminalFlappyBird","birdPosition","setBirdPosition","useState","gameHasStarted","setGameHasStarted","gameOver","setGameOver","score","setScore","highScore","setHighScore","velocity","setVelocity","pipes","setPipes","isMobile","window","innerWidth","GRAVITY","JUMP_FORCE","PIPE_WIDTH","PIPE_GAP","BIRD_SIZE","GAME_HEIGHT","GAME_WIDTH","useEffect","savedHighScore","localStorage","getItem","parseInt","handleSpacebar","e","code","preventDefault","jump","addEventListener","removeEventListener","frameId","gameLoop","v","pos","newPos","endGame","currentPipes","updatedPipes","map","pipe","_objectSpread","x","filter","length","newHeight","Math","random","push","id","Date","now","height","passed","forEach","s","birdRect","left","right","top","bottom","upperPipeRect","lowerPipeRect","checkCollision","requestAnimationFrame","cancelAnimationFrame","rect1","rect2","resetGame","setItem","_jsx","className","children","_jsxs","onClick","onTouchStart","style","width","concat","position","overflow","backgroundColor","color","fontFamily","border","padding","borderRadius","transform","transition","React","display","flexDirection","justifyContent","alignItems","fontSize","marginBottom","_Fragment","marginTop","textAlign"],"sourceRoot":""}