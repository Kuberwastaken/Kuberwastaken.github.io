{"version":3,"file":"static/js/982.a6f22976.chunk.js","mappings":"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","sources":["components/Jarvis/Jarvis.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Jarvis.css';\r\n\r\n// Utility function to parse markdown-style formatting\r\nconst parseMarkdown = (text) => {\r\n  if (!text) return '';\r\n  \r\n  // Replace headers: ## Heading -> <h2>Heading</h2>\r\n  let parsed = text.replace(/^##\\s+(.*?)$/gm, '<h2>$1</h2>');\r\n  parsed = parsed.replace(/^#\\s+(.*?)$/gm, '<h1>$1</h1>');\r\n  parsed = parsed.replace(/^###\\s+(.*?)$/gm, '<h3>$1</h3>');\r\n  \r\n  // Replace bold text: **text** -> <strong>text</strong>\r\n  parsed = parsed.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\r\n  \r\n  // Replace italic text: *text* -> <em>text</em>\r\n  parsed = parsed.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\r\n  \r\n  // Replace code blocks: ```code``` -> <pre><code>code</code></pre>\r\n  parsed = parsed.replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>');\r\n  \r\n  // Replace inline code: `code` -> <code>code</code>\r\n  parsed = parsed.replace(/`(.*?)`/g, '<code>$1</code>');\r\n  \r\n  // Replace links: [text](url) -> <a href=\"url\">text</a>\r\n  parsed = parsed.replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>');\r\n  \r\n  // Replace unordered lists: - item -> <li>item</li>\r\n  parsed = parsed.replace(/^-\\s+(.*?)$/gm, '<li>$1</li>');\r\n  \r\n  // Replace horizontal rules: --- -> <hr/>\r\n  parsed = parsed.replace(/^---$/gm, '<hr/>');\r\n  \r\n  return parsed;\r\n};\r\n\r\nconst Jarvis = () => {\r\n  const [response, setResponse] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const [inputValue, setInputValue] = useState('');\r\n  \r\n  const chatWindowRef = useRef(null);\r\n  const API_URL = 'https://jarvis-backend-r9vl.onrender.com';\r\n\r\n  useEffect(() => {\r\n    // Initialize session when component mounts\r\n    const initSession = async () => {\r\n      try {\r\n        const res = await fetch(`${API_URL}/start-session`);\r\n        const data = await res.json();\r\n        setSessionId(data.session_id);\r\n        \r\n        // Save session ID to localStorage for persistence\r\n        localStorage.setItem('jarvis_session_id', data.session_id);\r\n      } catch (error) {\r\n        console.error('Failed to initialize session:', error);\r\n      }\r\n    };\r\n    \r\n    // Check if we have a session ID in localStorage\r\n    const savedSessionId = localStorage.getItem('jarvis_session_id');\r\n    if (savedSessionId) {\r\n      setSessionId(savedSessionId);\r\n    } else {\r\n      initSession();\r\n    }\r\n    \r\n    setMessages([\r\n      {\r\n        text: 'Hello, my name is **JARVIS**. I\\'m an AI assistant designed by *Kuber Mehta* to assist you with information about his portfolio and projects. How may I help you today?',\r\n        isJarvis: true\r\n      }\r\n    ]);\r\n  }, []);\r\n\r\n  // Scroll to bottom of chat window when messages update\r\n  useEffect(() => {\r\n    if (chatWindowRef.current) {\r\n      chatWindowRef.current.scrollTop = chatWindowRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  const handleJarvisQuery = async (query) => {\r\n    if (!query.trim()) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    // Add user message to chat immediately\r\n    setMessages(prevMessages => [\r\n      ...prevMessages, \r\n      { text: query, isUser: true }\r\n    ]);\r\n    \r\n    try {\r\n      const res = await fetch(`${API_URL}/query`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \r\n          inputs: query,\r\n          session_id: sessionId\r\n        }),\r\n        credentials: 'include'\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errorData = await res.json();\r\n        throw new Error(errorData.error || 'Unknown error');\r\n      }\r\n\r\n      const data = await res.json();\r\n      const responseText = data.generated_text || 'No response received';\r\n\r\n      // Add Jarvis response to chat\r\n      setMessages(prevMessages => [\r\n        ...prevMessages, \r\n        { text: responseText, isJarvis: true }\r\n      ]);\r\n      \r\n      setResponse(responseText);\r\n    } catch (error) {\r\n      console.error('Query Error:', error);\r\n      \r\n      // Add error message to chat\r\n      setMessages(prevMessages => [\r\n        ...prevMessages, \r\n        { \r\n          text: `I apologize, but I'm experiencing a technical issue: ${error.message}. Please try again later.`, \r\n          isJarvis: true, \r\n          isError: true \r\n        }\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const query = inputValue;\r\n    setInputValue('');\r\n    handleJarvisQuery(query);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  const renderTextWithLineBreaks = (text) => {\r\n    const parsedLines = text.split('\\n').map((line, index) => {\r\n      return (\r\n        <div\r\n          key={index}\r\n          dangerouslySetInnerHTML={{ __html: parseMarkdown(line) }}\r\n          className=\"markdown-line\"\r\n        />\r\n      );\r\n    });\r\n    \r\n    return <div className=\"markdown-content\">{parsedLines}</div>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"jarvis-container\">\r\n      <div className=\"chat-window\" ref={chatWindowRef}>\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className=\"message\">\r\n            {msg.isUser ? (\r\n              <div className=\"user-message\">\r\n                <strong>You:</strong> {renderTextWithLineBreaks(msg.text)}\r\n              </div>\r\n            ) : (\r\n              <div className={`jarvis-response ${msg.isError ? 'error-message' : ''}`}>\r\n                <strong>Jarvis:</strong> {renderTextWithLineBreaks(msg.text)}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n        {loading && <div className=\"loading\">Loading...</div>}\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit} className=\"input-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder=\"Ask Jarvis something...\"\r\n          className=\"query-input\"\r\n        />\r\n        <button type=\"submit\" className=\"send-button\" disabled={loading || !inputValue.trim()}>\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jarvis;"],"names":["parseMarkdown","text","parsed","replace","Jarvis","response","setResponse","useState","loading","setLoading","messages","setMessages","sessionId","setSessionId","inputValue","setInputValue","chatWindowRef","useRef","API_URL","useEffect","savedSessionId","localStorage","getItem","async","res","fetch","concat","data","json","session_id","setItem","error","console","initSession","isJarvis","current","scrollTop","scrollHeight","handleSubmit","e","preventDefault","query","trim","prevMessages","isUser","method","headers","body","JSON","stringify","inputs","credentials","ok","errorData","Error","responseText","generated_text","message","isError","handleJarvisQuery","renderTextWithLineBreaks","parsedLines","split","map","line","index","_jsx","dangerouslySetInnerHTML","__html","className","children","_jsxs","ref","msg","onSubmit","type","value","onChange","target","onKeyDown","key","shiftKey","placeholder","disabled"],"sourceRoot":""}