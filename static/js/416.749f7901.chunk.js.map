{"version":3,"file":"static/js/416.749f7901.chunk.js","mappings":"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","sources":["components/GameOfLife/GameOfLife.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\r\nimport './GameOfLife.css';\r\n\r\nclass Cell {\r\n  constructor(i, j) {\r\n    this.i = i;\r\n    this.j = j;\r\n  }\r\n\r\n  getNeighbors() {\r\n    let neighbors = [];\r\n    neighbors.push(new Cell(this.i - 1, this.j - 1));\r\n    neighbors.push(new Cell(this.i - 1, this.j));\r\n    neighbors.push(new Cell(this.i - 1, this.j + 1));\r\n    neighbors.push(new Cell(this.i, this.j - 1));\r\n    neighbors.push(new Cell(this.i, this.j + 1));\r\n    neighbors.push(new Cell(this.i + 1, this.j - 1));\r\n    neighbors.push(new Cell(this.i + 1, this.j));\r\n    neighbors.push(new Cell(this.i + 1, this.j + 1));\r\n    return neighbors;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.i},${this.j}`;\r\n  }\r\n}\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.cells = new Map();\r\n  }\r\n\r\n  born(cell) {\r\n    this.cells.set(cell.toString(), cell);\r\n  }\r\n\r\n  kill(cell) {\r\n    this.cells.delete(cell.toString());\r\n  }\r\n\r\n  isAlive(cell) {\r\n    return this.cells.has(cell.toString());\r\n  }\r\n\r\n  getAliveNeighbors(cell) {\r\n    var aliveNeighbors = [];\r\n    for (const neighbor of cell.getNeighbors()) {\r\n      if (this.isAlive(neighbor)) {\r\n        aliveNeighbors.push(neighbor);\r\n      }\r\n    }\r\n    return aliveNeighbors;\r\n  }\r\n\r\n  toggleCell(i, j) {\r\n    let cell = new Cell(i, j);\r\n    if (this.isAlive(cell)) {\r\n      this.kill(cell);\r\n    } else {\r\n      this.born(cell);\r\n    }\r\n  }\r\n\r\n  step() {\r\n    let toBeAnalyzed = new Map();\r\n\r\n    for (const cell of this.cells.values()) {\r\n      toBeAnalyzed.set(cell.toString(), cell);\r\n      for (const neighbor of cell.getNeighbors()) {\r\n        toBeAnalyzed.set(neighbor.toString(), neighbor);\r\n      }\r\n    }\r\n\r\n    var nextStates = [];\r\n\r\n    for (const cell of toBeAnalyzed.values()) {\r\n      var nAliveNeighbors = this.getAliveNeighbors(cell).length;\r\n\r\n      // Any live cell with fewer than two live neighbors dies (underpopulation)\r\n      if (this.isAlive(cell) && nAliveNeighbors < 2) {\r\n        nextStates.push({ cell, next: \"dead\" });\r\n      }\r\n      // Any live cell with more than three live neighbors dies (overpopulation)\r\n      else if (this.isAlive(cell) && nAliveNeighbors > 3) {\r\n        nextStates.push({ cell, next: \"dead\" });\r\n      }\r\n      // Any dead cell with exactly three live neighbors becomes alive (reproduction)\r\n      else if (nAliveNeighbors === 3) {\r\n        nextStates.push({ cell, next: \"alive\" });\r\n      }\r\n      // Any live cell with two or three live neighbors lives on (survival)\r\n    }\r\n\r\n    var that = this;\r\n    nextStates.forEach(function (state) {\r\n      if (state.next === \"dead\") {\r\n        that.kill(state.cell);\r\n      } else if (state.next === \"alive\") {\r\n        that.born(state.cell);\r\n      }\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    this.cells.clear();\r\n  }\r\n\r\n  getCells() {\r\n    return Array.from(this.cells.values());\r\n  }\r\n}\r\n\r\nconst GameOfLife = () => {\r\n  const canvasRef = useRef(null);\r\n  const gameRef = useRef(new Game());\r\n  const intervalRef = useRef(null);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [speed, setSpeed] = useState(200); // milliseconds\r\n  const [generation, setGeneration] = useState(0);\r\n  const [showGrid, setShowGrid] = useState(true);\r\n  const [statusMessage, setStatusMessage] = useState('');\r\n  \r\n  const cellSize = 8;\r\n  const canvasWidth = 600;\r\n  const canvasHeight = 400;\r\n  const cols = Math.floor(canvasWidth / cellSize);\r\n  const rows = Math.floor(canvasHeight / cellSize);\r\n\r\n  const draw = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw grid\r\n    if (showGrid) {\r\n      ctx.strokeStyle = '#2a2a2a';\r\n      ctx.lineWidth = 0.5;\r\n      \r\n      for (let i = 0; i <= cols; i++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(i * cellSize, 0);\r\n        ctx.lineTo(i * cellSize, canvas.height);\r\n        ctx.stroke();\r\n      }\r\n      \r\n      for (let i = 0; i <= rows; i++) {\r\n        ctx.beginPath();\r\n        ctx.moveTo(0, i * cellSize);\r\n        ctx.lineTo(canvas.width, i * cellSize);\r\n        ctx.stroke();\r\n      }\r\n    }\r\n\r\n    // Draw alive cells\r\n    ctx.fillStyle = '#5abb9a';\r\n    gameRef.current.getCells().forEach(cell => {\r\n      const x = cell.j * cellSize;\r\n      const y = cell.i * cellSize;\r\n      if (x >= 0 && x < canvasWidth && y >= 0 && y < canvasHeight) {\r\n        ctx.fillRect(x, y, cellSize, cellSize);\r\n      }\r\n    });\r\n  }, [showGrid, cellSize, cols, rows, canvasWidth, canvasHeight]);\r\n\r\n  const handleCanvasClick = useCallback((e) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n    \r\n    const col = Math.floor(x / cellSize);\r\n    const row = Math.floor(y / cellSize);\r\n    \r\n    if (col >= 0 && col < cols && row >= 0 && row < rows) {\r\n      gameRef.current.toggleCell(row, col);\r\n      draw();\r\n    }\r\n  }, [draw, cellSize, cols, rows]);\r\n\r\n  const handleCanvasTouch = useCallback((e) => {\r\n    e.preventDefault();\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const touch = e.touches[0];\r\n    const x = touch.clientX - rect.left;\r\n    const y = touch.clientY - rect.top;\r\n    \r\n    const col = Math.floor(x / cellSize);\r\n    const row = Math.floor(y / cellSize);\r\n    \r\n    if (col >= 0 && col < cols && row >= 0 && row < rows) {\r\n      gameRef.current.toggleCell(row, col);\r\n      draw();\r\n    }\r\n  }, [draw, cellSize, cols, rows]);\r\n\r\n  const step = useCallback(() => {\r\n    const beforePopulation = gameRef.current.getCells().length;\r\n    gameRef.current.step();\r\n    const afterPopulation = gameRef.current.getCells().length;\r\n    \r\n    setGeneration(prev => prev + 1);\r\n    \r\n    // If population goes to 0, pause the game\r\n    if (afterPopulation === 0 && beforePopulation > 0) {\r\n      clearInterval(intervalRef.current);\r\n      setIsPlaying(false);\r\n      setStatusMessage('All cells died - evolution stopped');\r\n      setTimeout(() => setStatusMessage(''), 3000);\r\n    }\r\n    \r\n    draw();\r\n  }, [draw]);\r\n\r\n  const play = useCallback(() => {\r\n    if (isPlaying) {\r\n      clearInterval(intervalRef.current);\r\n      setIsPlaying(false);\r\n    } else {\r\n      intervalRef.current = setInterval(step, speed);\r\n      setIsPlaying(true);\r\n    }\r\n  }, [isPlaying, step, speed]);\r\n\r\n  const clear = useCallback(() => {\r\n    clearInterval(intervalRef.current);\r\n    setIsPlaying(false);\r\n    gameRef.current.clear();\r\n    setGeneration(0);\r\n    draw();\r\n  }, [draw]);\r\n\r\n  const addRandomCells = useCallback(() => {\r\n    // Clear existing cells first\r\n    gameRef.current.clear();\r\n    setGeneration(0);\r\n    \r\n    // Create multiple small clusters and some known stable patterns\r\n    const numClusters = 6;\r\n    \r\n    // Add some random clusters\r\n    for (let cluster = 0; cluster < numClusters; cluster++) {\r\n      const centerRow = Math.floor(Math.random() * (rows - 8)) + 4;\r\n      const centerCol = Math.floor(Math.random() * (cols - 8)) + 4;\r\n      \r\n      // Create denser clusters with higher survival chance\r\n      for (let i = -2; i <= 2; i++) {\r\n        for (let j = -2; j <= 2; j++) {\r\n          if (Math.random() < 0.5) { // 50% chance for each cell in cluster\r\n            const row = centerRow + i;\r\n            const col = centerCol + j;\r\n            if (row >= 0 && row < rows && col >= 0 && col < cols) {\r\n              gameRef.current.born(new Cell(row, col));\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Add a few guaranteed stable patterns for more interesting evolution\r\n    const stablePatterns = [\r\n      // Block (2x2 square - completely stable)\r\n      { row: Math.floor(rows * 0.7), col: Math.floor(cols * 0.2), pattern: [[0,0], [0,1], [1,0], [1,1]] },\r\n      // Tub (stable pattern)\r\n      { row: Math.floor(rows * 0.3), col: Math.floor(cols * 0.8), pattern: [[0,1], [1,0], [1,2], [2,1]] },\r\n      // Beehive (stable pattern)\r\n      { row: Math.floor(rows * 0.8), col: Math.floor(cols * 0.6), pattern: [[0,1], [0,2], [1,0], [1,3], [2,1], [2,2]] }\r\n    ];\r\n    \r\n    stablePatterns.forEach(({ row: startRow, col: startCol, pattern }) => {\r\n      pattern.forEach(([offsetRow, offsetCol]) => {\r\n        const row = startRow + offsetRow;\r\n        const col = startCol + offsetCol;\r\n        if (row >= 0 && row < rows && col >= 0 && col < cols) {\r\n          gameRef.current.born(new Cell(row, col));\r\n        }\r\n      });\r\n    });\r\n    \r\n    setStatusMessage(`Added ${gameRef.current.getCells().length} cells (clusters + stable patterns)`);\r\n    setTimeout(() => setStatusMessage(''), 2000);\r\n    draw();\r\n  }, [draw, rows, cols]);\r\n\r\n  useEffect(() => {\r\n    draw();\r\n  }, [draw]);\r\n\r\n  useEffect(() => {\r\n    if (isPlaying) {\r\n      clearInterval(intervalRef.current);\r\n      intervalRef.current = setInterval(step, speed);\r\n    }\r\n  }, [speed, step, isPlaying]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(intervalRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"gameoflife-container\">\r\n      <div className=\"gameoflife-header\">\r\n        <h3 style={{ color: '#5abb9a', marginBottom: '10px' }}>Kuber's Game of Life</h3>\r\n        <p style={{ color: '#ffebcd', fontSize: '14px', marginBottom: '15px' }}>\r\n          Click cells to toggle them, use preset patterns, then press Play to watch evolution!\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"gameoflife-controls\">\r\n        <button \r\n          className=\"gameoflife-btn\" \r\n          onClick={play}\r\n        >\r\n          {isPlaying ? '⏸️ Pause' : '▶️ Play'}\r\n        </button>\r\n        \r\n        <button \r\n          className=\"gameoflife-btn\" \r\n          onClick={step}\r\n          disabled={isPlaying}\r\n        >\r\n          ⏭️ Step\r\n        </button>\r\n        \r\n        <button \r\n          className=\"gameoflife-btn\" \r\n          onClick={clear}\r\n        >\r\n          🗑️ Clear\r\n        </button>\r\n        \r\n        <button \r\n          className=\"gameoflife-btn\" \r\n          onClick={addRandomCells}\r\n        >\r\n          🎲 Random\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"gameoflife-settings\">\r\n        <div className=\"speed-controls\">\r\n          <label style={{ color: '#ffebcd', marginRight: '10px' }}>Speed:</label>\r\n          <button \r\n            className={`gameoflife-speed-btn ${speed === 400 ? 'active' : ''}`}\r\n            onClick={() => setSpeed(400)}\r\n          >\r\n            Slow\r\n          </button>\r\n          <button \r\n            className={`gameoflife-speed-btn ${speed === 200 ? 'active' : ''}`}\r\n            onClick={() => setSpeed(200)}\r\n          >\r\n            Normal\r\n          </button>\r\n          <button \r\n            className={`gameoflife-speed-btn ${speed === 100 ? 'active' : ''}`}\r\n            onClick={() => setSpeed(100)}\r\n          >\r\n            Fast\r\n          </button>\r\n        </div>\r\n        \r\n        <label className=\"grid-toggle\">\r\n          <input \r\n            type=\"checkbox\" \r\n            checked={showGrid} \r\n            onChange={(e) => setShowGrid(e.target.checked)}\r\n          />\r\n          <span style={{ color: '#ffebcd', marginLeft: '5px' }}>Show Grid</span>\r\n        </label>\r\n      </div>\r\n\r\n      <div className=\"gameoflife-stats\">\r\n        <span style={{ color: '#5abb9a' }}>Generation: {generation}</span>\r\n        <span style={{ color: '#5abb9a', marginLeft: '20px' }}>\r\n          Population: {gameRef.current?.getCells().length || 0}\r\n        </span>\r\n        {statusMessage && (\r\n          <span style={{ color: '#ffcc00', marginLeft: '20px', fontSize: '12px' }}>\r\n            {statusMessage}\r\n          </span>\r\n        )}\r\n      </div>\r\n\r\n      <canvas\r\n        ref={canvasRef}\r\n        width={canvasWidth}\r\n        height={canvasHeight}\r\n        className=\"gameoflife-canvas\"\r\n        onClick={handleCanvasClick}\r\n        onTouchStart={handleCanvasTouch}\r\n      />\r\n\r\n      <div className=\"gameoflife-instructions\">\r\n        <p style={{ color: '#888', fontSize: '12px', textAlign: 'center' }}>\r\n          Rules: (1) Live cell with &lt;2 neighbors dies (2) Live cell with 2-3 neighbors survives \r\n          (3) Live cell with &gt;3 neighbors dies (4) Dead cell with exactly 3 neighbors becomes alive\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(GameOfLife); "],"names":["Cell","constructor","i","j","this","getNeighbors","neighbors","push","toString","concat","Game","cells","Map","born","cell","set","kill","delete","isAlive","has","getAliveNeighbors","aliveNeighbors","neighbor","toggleCell","step","toBeAnalyzed","values","nextStates","nAliveNeighbors","length","next","that","forEach","state","clear","getCells","Array","from","GameOfLife","_gameRef$current","canvasRef","useRef","gameRef","intervalRef","isPlaying","setIsPlaying","useState","speed","setSpeed","generation","setGeneration","showGrid","setShowGrid","statusMessage","setStatusMessage","canvasWidth","canvasHeight","cols","Math","floor","rows","draw","useCallback","canvas","current","ctx","getContext","clearRect","width","height","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","fillStyle","x","y","fillRect","handleCanvasClick","e","rect","getBoundingClientRect","clientX","left","clientY","top","col","row","handleCanvasTouch","preventDefault","touch","touches","beforePopulation","afterPopulation","prev","clearInterval","setTimeout","play","setInterval","addRandomCells","cluster","centerRow","random","centerCol","pattern","_ref","startRow","startCol","_ref2","offsetRow","offsetCol","useEffect","_jsxs","className","children","_jsx","style","color","marginBottom","fontSize","onClick","disabled","marginRight","type","checked","onChange","target","marginLeft","ref","onTouchStart","textAlign","React"],"sourceRoot":""}