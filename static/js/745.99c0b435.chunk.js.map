{"version":3,"file":"static/js/745.99c0b435.chunk.js","mappings":"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","sources":["components/SnakeGame/SnakeGame.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './SnakeGame.css';\r\n\r\nconst SnakeGame = () => {\r\n  const canvasRef = useRef(null);\r\n  const intervalRef = useRef(null);\r\n  const [snake, setSnake] = useState([{ x: 10, y: 10 }]);\r\n  const [food, setFood] = useState({ x: 15, y: 15 });\r\n  const [direction, setDirection] = useState({ x: 1, y: 0 });\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n    \r\n    const ctx = canvas.getContext('2d');\r\n    const scale = 20;\r\n    const rows = canvas.height / scale;\r\n    const columns = canvas.width / scale;\r\n\r\n    const draw = () => {\r\n      if (gameOver) return;\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      ctx.fillStyle = 'red';\r\n      ctx.fillRect(food.x * scale, food.y * scale, scale, scale);\r\n\r\n      ctx.fillStyle = 'green';\r\n      snake.forEach(segment => {\r\n        ctx.fillRect(segment.x * scale, segment.y * scale, scale, scale);\r\n      });\r\n\r\n      const newSnake = [...snake];\r\n      const head = { x: newSnake[0].x + direction.x, y: newSnake[0].y + direction.y };\r\n\r\n      if (head.x === food.x && head.y === food.y) {\r\n        setFood({\r\n          x: Math.floor(Math.random() * columns),\r\n          y: Math.floor(Math.random() * rows)\r\n        });\r\n      } else {\r\n        newSnake.pop();\r\n      }\r\n\r\n      if (\r\n        head.x < 0 || head.x >= columns ||\r\n        head.y < 0 || head.y >= rows ||\r\n        newSnake.some(segment => segment.x === head.x && segment.y === head.y)\r\n      ) {\r\n        setGameOver(true);\r\n        return;\r\n      }\r\n\r\n      newSnake.unshift(head);\r\n      setSnake(newSnake);\r\n    };\r\n\r\n    intervalRef.current = setInterval(draw, 100);\r\n\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, [snake, food, direction, gameOver]);\r\n\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      switch (e.key) {\r\n        case 'ArrowUp':\r\n          if (direction.y === 0) setDirection({ x: 0, y: -1 });\r\n          break;\r\n        case 'ArrowDown':\r\n          if (direction.y === 0) setDirection({ x: 0, y: 1 });\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (direction.x === 0) setDirection({ x: -1, y: 0 });\r\n          break;\r\n        case 'ArrowRight':\r\n          if (direction.x === 0) setDirection({ x: 1, y: 0 });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    const handleTouch = (e) => {\r\n      if (gameOver) return;\r\n\r\n      const canvas = canvasRef.current;\r\n      const rect = canvas.getBoundingClientRect();\r\n      const touch = e.touches[0];\r\n      const relX = touch.clientX - rect.left;\r\n      const relY = touch.clientY - rect.top;\r\n\r\n      const regionWidth = canvas.width / 3;\r\n      const regionHeight = canvas.height / 3;\r\n\r\n      if (relY < regionHeight) {\r\n        if (direction.y === 0) setDirection({ x: 0, y: -1 });\r\n      } else if (relY > canvas.height - regionHeight) {\r\n        if (direction.y === 0) setDirection({ x: 0, y: 1 });\r\n      } else if (relX < regionWidth) {\r\n        if (direction.x === 0) setDirection({ x: -1, y: 0 });\r\n      } else if (relX > canvas.width - regionWidth) {\r\n        if (direction.x === 0) setDirection({ x: 1, y: 0 });\r\n      }\r\n\r\n      e.preventDefault();\r\n    };\r\n\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    if (canvasRef.current) {\r\n      canvasRef.current.addEventListener('touchstart', handleTouch);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      if (canvasRef.current) {\r\n        canvasRef.current.removeEventListener('touchstart', handleTouch);\r\n      }\r\n    };\r\n  }, [direction, gameOver]);\r\n\r\n  return (\r\n    <div className=\"snake-game-container\">\r\n      <canvas ref={canvasRef} width=\"400\" height=\"400\" className=\"snake-game-canvas\"></canvas>\r\n      {gameOver && <div className=\"game-over\">Game Over</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SnakeGame);"],"names":["SnakeGame","canvasRef","useRef","intervalRef","snake","setSnake","useState","x","y","food","setFood","direction","setDirection","gameOver","setGameOver","useEffect","canvas","current","ctx","getContext","scale","rows","height","columns","width","setInterval","draw","clearRect","fillStyle","fillRect","forEach","segment","newSnake","head","Math","floor","random","pop","some","unshift","clearInterval","handleKeyDown","e","key","handleTouch","rect","getBoundingClientRect","touch","touches","relX","clientX","left","relY","clientY","top","regionWidth","regionHeight","preventDefault","window","addEventListener","removeEventListener","_jsxs","className","children","_jsx","ref","React"],"sourceRoot":""}